-- general structure

program = { definition | statement };

-- statement

statement = assignment_statement | call_statement | if_statement | for_statement | while_statement | try_statement | raise_statement | continue_statement | break_statement;

assignment_statement = IDENTIFIER , ASSIGNMENT , expression , ";";

call_statement = call , ";";

-- definition

definition = class_definition | function_definition | variable_definition;

-- variable

variable_definition = type , IDENTIFIER , ASSIGNMENT , expression , ";";

-- function

function_definition = "<function>" , IDENTIFIER , "(", [ parameters ] , ")" , "->" , type , "{" , { statement } , "}";

parameters = parameter , { "," , parameter };

parameter = type , IDENTIFIER , [ ASSIGNMENT , expression ];

-- class

class_definition = "<class>" , IDENTIFIER , "<inherits>" , IDENTIFIER , "{" , { class_body } , "}";

class_body = { field_declaration } ,
             [ constructor_definition ] ,
             { method_definition };

field_declaration = type , IDENTIFIER , ";";

constructor_definition = "<constructor>" , IDENTIFIER , "(", [ parameters ] , ")" , "{" , { statement } , "}";

method_definition = function_definition;

-- expression

expression = ("(", expression, ")") | binary_expression | unary_expression | call_expression | literal_expression | IDENTIFIER_expression;

binary_expression = expression , binary_operator , expression;
binary_operator = "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "and" | "or";

unary_expression = unary_operator , expression;
unary_operator = "+" | "-" | "not";

call_expression = call;

call = compound_identifier , "(", [ arguments ] , ")";

arguments = expression , { "," , expression };

literal_expression = INTEGER | FLOAT | BOOLEAN | STRING;

-- types and identifiers

identifier_expression = IDENTIFIER;

type = "<int>" | "<float>" | "<bool>" | "<string>" | "<void>"| IDENTIFIER;

compound_identifier = { IDENTIFIER , "." } , IDENTIFIER ;

-- if

if_statement = simple_if_statement | compound_if_statement;

simple_if_statement = "<leaf>" , expression , "{" , { statement } , "}";

compound_if_statement = "<tree>" , "{" , simple_if_statement , { simple_if_statement } , [ "<fallen_leaf>" , "{" , { statement } , "}" ] , "}";

-- loops

for_statement = "<for>" , type, IDENTIFIER , "in" , ( compound_identifier | call ) , "{" , { statement } , "}";

while_statement = "<while>" , expression , "{" , { statement } , "}";

-- exceptions

try_statement = "<try>" , "{" , { statement } , "}" , "<except>" , IDENTIFIER , "{" , { statement } , "}" , [ "<finally>" , "{" , { statement } , "}" ];

raise_statement = "<raise>" , IDENTIFIER , ";";

-- control flow

continue_statement = "<continue>" , ";";

break_statement = "<break>" , ";";
